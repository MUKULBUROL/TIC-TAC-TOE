#include <iostream>
#include <ctime>
#include <cstdlib>
#include <conio.h>
#include <windows.h>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer, int difficulty);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);
void setColor(int textColor, int backgroundColor);
int chooseDifficulty();

int main()
{
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    int difficulty = chooseDifficulty();

    drawBoard(spaces);

    while(running){
        playerMove(spaces, player);
        drawBoard(spaces);
        if(checkWinner(spaces, player, computer)){
            running = false;
            break;
        }
        else if(checkTie(spaces)){
            running = false;
            break;
        }

        computerMove(spaces, computer, difficulty);
        drawBoard(spaces);
        if(checkWinner(spaces, player, computer)){
            running = false;
            break;
        }
        else if(checkTie(spaces)){
            running = false;
            break;
        }
    }
    std::cout << "Thanks for playing!\n";

    return 0;
}

void drawBoard(char *spaces){
    system("cls");
    setColor(14, 0); // Set color for borders and text
    std::cout << '\n';
    std::cout << "     |     |     " << '\n';
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << "  " << '\n';
    std::cout << "_____|_____|_____" << '\n';
    std::cout << "     |     |     " << '\n';
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << "  " << '\n';
    std::cout << "_____|_____|_____" << '\n';
    std::cout << "     |     |     " << '\n';
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << "  " << '\n';
    std::cout << "     |     |     " << '\n';
    std::cout << '\n';
    setColor(15, 0); // Reset color
}

void playerMove(char *spaces, char player){
    int number;
    do{
        std::cout << "Enter a spot to place a marker (1-9): ";
        std::cin >> number;
        number--;
        if(spaces[number] == ' '){
           spaces[number] = player;
           break; 
        }
    }while(number < 0 || number > 8);
}

void computerMove(char *spaces, char computer, int difficulty){
    int number;
    srand(time(0));

    if(difficulty == 1){
        // Easy difficulty: Random moves
        while(true){
            number = rand() % 9;
            if(spaces[number] == ' '){
                spaces[number] = computer;
                break;
            }
        }
    }
    else if(difficulty == 2){
        // Hard difficulty: Basic strategy to block player's winning moves
        for(int i = 0; i < 9; i++){
            if(spaces[i] == ' '){
                spaces[i] = computer;
                if(checkWinner(spaces, computer, 'X')){
                    return;
                }
                spaces[i] = ' ';
            }
        }
        for(int i = 0; i < 9; i++){
            if(spaces[i] == ' '){
                spaces[i] = 'X';
                if(checkWinner(spaces, 'X', computer)){
                    spaces[i] = computer;
                    return;
                }
                spaces[i] = ' ';
            }
        }
        while(true){
            number = rand() % 9;
            if(spaces[number] == ' '){
                spaces[number] = computer;
                break;
            }
        }
    }
}

bool checkWinner(char *spaces, char player, char computer){
    bool win = false;

    if((spaces[0] != ' ') && (spaces[0] == spaces[1]) && (spaces[1] == spaces[2])){
        win = true;
    }
    else if((spaces[3] != ' ') && (spaces[3] == spaces[4]) && (spaces[4] == spaces[5])){
        win = true;
    }
    else if((spaces[6] != ' ') && (spaces[6] == spaces[7]) && (spaces[7] == spaces[8])){
        win = true;
    }
    else if((spaces[0] != ' ') && (spaces[0] == spaces[3]) && (spaces[3] == spaces[6])){
        win = true;
    }
    else if((spaces[1] != ' ') && (spaces[1] == spaces[4]) && (spaces[4] == spaces[7])){
        win = true;
    }
    else if((spaces[2] != ' ') && (spaces[2] == spaces[5]) && (spaces[5] == spaces[8])){
        win = true;
    }
    else if((spaces[0] != ' ') && (spaces[0] == spaces[4]) && (spaces[4] == spaces[8])){
        win = true;
    }
    else if((spaces[2] != ' ') && (spaces[2] == spaces[4]) && (spaces[4] == spaces[6])){
        win = true;
    }

    if(win){
        spaces[0] == player ? std::cout << "YOU WIN!\n" : std::cout << "YOU LOSE!\n";
    }

    return win;
}

bool checkTie(char *spaces){
    for(int i = 0; i < 9; i++){
        if(spaces[i] == ' '){
            return false;
        }
    }
    std::cout << "IT'S A TIE!\n";
    return true;
}

void setColor(int textColor, int backgroundColor){
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, (WORD)((backgroundColor << 4) | textColor));
}

int chooseDifficulty(){
    int difficulty;
    do{
        std::cout << "Choose difficulty level (1: Easy, 2: Hard): ";
        std::cin >> difficulty;
    } while(difficulty < 1 || difficulty > 2);
    return difficulty;
}
